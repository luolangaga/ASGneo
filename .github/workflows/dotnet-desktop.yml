name: Build and Deploy ASG API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './ASG.Api'
  DOCKER_IMAGE_NAME: 'asg-api'

jobs:
  # 构建 Windows 版本
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
      
    - name: Test
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal
      
    - name: Publish Windows x64
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o ./publish/win-x64
      
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: asg-api-windows-x64
        path: ./publish/win-x64/
        retention-days: 30

  # 构建 Linux 版本
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
      
    - name: Test
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal
      
    - name: Publish Linux x64
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -o ./publish/linux-x64
      
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: asg-api-linux-x64
        path: ./publish/linux-x64/
        retention-days: 30

  # 构建 Docker 镜像
  build-docker:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 创建 GitHub Release（仅在发布时）
  create-release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-docker]
    
    steps:
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: asg-api-windows-x64
        path: ./artifacts/windows/
        
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: asg-api-linux-x64
        path: ./artifacts/linux/
        
    - name: Create ZIP archives
      run: |
        cd ./artifacts
        zip -r asg-api-windows-x64.zip windows/
        tar -czf asg-api-linux-x64.tar.gz linux/
        
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/asg-api-windows-x64.zip
          ./artifacts/asg-api-linux-x64.tar.gz
        body: |
          ## ASG API Release ${{ github.ref_name }}
          
          ### 下载说明
          - **Windows 版本**: `asg-api-windows-x64.zip` - 适用于 Windows x64 系统
          - **Linux 版本**: `asg-api-linux-x64.tar.gz` - 适用于 Linux x64 系统
          - **Docker 镜像**: `docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.ref_name }}`
          
          ### 运行说明
          1. 解压下载的文件
          2. 配置 `appsettings.json` 文件
          3. 运行可执行文件或使用 Docker 容器
          
          更多详细信息请查看项目文档。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
